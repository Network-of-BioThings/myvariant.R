varscan.vcf <- subset(read.csv("/Users/Adam/avera/vcf/T47D_vcf_5_28/T47D-RNATotal-CC-04132015-rep2-repeat_S7_varscan.txt", stringsAsFactors = F, sep="\t", header=T), Reads2Minus > 0)
varscan.variants <- paste(varscan.vcf$Chrom, ":g.", varscan.vcf$Position, varscan.vcf$Ref, ">", varscan.vcf$VarAllele, sep="")
vars.compare <- list()
vars.compare[[1]] <- gatk.variants
vars.compare[[2]] <- varscan.variants
length(intersect(vars.compare[[1]], vars.compare[[2]]))
source('~/sulab/repos/myvariant.R/R/readHGVS.R')
gatk.variants <- formatHgvs(readVcf("/Users/Adam/avera/vcf/T47D_vcf_5_28/T47D-RNATotal-CC-04132015-rep2-repeat_S7_final_variants_sort.vcf", genome="hg19"), "snp")
varscan.vcf <- subset(read.csv("/Users/Adam/avera/vcf/T47D_vcf_5_28/T47D-RNATotal-CC-04132015-rep2-repeat_S7_varscan.txt", stringsAsFactors = F, sep="\t", header=T), Reads2Minus > 0)
varscan.variants <- paste(varscan.vcf$Chrom, ":g.", varscan.vcf$Position, varscan.vcf$Ref, ">", varscan.vcf$VarAllele, sep="")
vars.compare <- list()
vars.compare[[1]] <- gatk.variants
vars.compare[[2]] <- varscan.variants
length(intersect(vars.compare[[1]], vars.compare[[2]]))
varscan.vcf <- read.csv("/Users/Adam/avera/vcf/T47D_vcf_5_28/T47D-RNATotal-CC-04132015-rep2-repeat_S7_varscan.txt", stringsAsFactors = F, sep="\t", header=T)
varscan.variants <- paste(varscan.vcf$Chrom, ":g.", varscan.vcf$Position, varscan.vcf$Ref, ">", varscan.vcf$VarAllele, sep="")
vars.compare <- list()
vars.compare[[1]] <- gatk.variants
vars.compare[[2]] <- varscan.variants
length(intersect(vars.compare[[1]], vars.compare[[2]]))
## compare variants between two outputs
#setwd("/Users/Adam/avera/vcf/T47D_vcf_5_28/")
setwd("/Users/Adam/AWS/storage/adam/samples/vcf/")
files <- paste(getwd(), list.files(getwd()), sep="/")
#sample.names <- gsub(".vcf", "", list.files(getwd()))
anno.files <- files[!grepl("cosmic|.idx", files)]
wgs <- "/Users/Adam/avera/vcf/T47D_vcf_5_28/t47d-mark-snp.vcf"
options(warn=-1)
getVars <- function(vcf, filter=T){
VA <- readVcf(vcf, genome="hg19")
coverage <- rowRanges(VA)
geno <- geno(VA)
AD <- geno$AD
PL <- geno$PL
row.names(AD) <- NULL
row.names(PL) <- NULL
coverage$PL <- PL[,1] %>% lapply(as.numeric) %>% List
AD <- AD[,1] %>% lapply(as.numeric) %>% List
coverage$AF <- sapply(AD, function(i) i[2]/sum(i))
coverage$DP <- as.numeric(geno(VA)$DP)
coverage$GT <- as.character(geno$GT)
coverage$GQ <- as.numeric(geno$GQ)
coverage$Variant <- row.names(VA)
coverage <- DataFrame(coverage)[c('Variant', 'AF', 'DP', 'GQ')] #"GT", "PL"
sample <- strsplit(vcf, "/")[[1]]
coverage$sample <- gsub(".vcf", "", sample[length(sample)])
row.names(coverage) <- NULL
subset(coverage, AF > 0)
}
vars <- lapply(anno.files, getVars)
wgs <- getVars(wgs)
# take random sample of 50000 from WGS including the variants from RNA-seq
inWGS <- do.call(rbind, lapply(vars, function(i) subset(i, Variant %in% wgs$Variant)))
wgs.sample <- do.call(rbind, list(inWGS,
wgs[sample(nrow(wgs), nrow(vars[[1]])), ]))
vars[[5]] <- wgs.sample[!duplicated(wgs.sample), ]
vars.df <- do.call(rbind, lapply(vars, data.frame))
vars.df$class <- vars.df$Variant %in% wgs.sample$Variant
#vars.mini <- vars[sample(nrow(vars), 20000), ]
vars.scaled <- scale(vars.df[c(2,3,4)])
vars.scaled$class <- vars.df$class
vars.scaled$sample <- vars.df$sample
# train.1 <- subset(vars.scaled, sample == vars[[1]]$sample)
# train.2 <- subset(vars.scaled, sample == vars[[2]]$sample)
# train.3 <- subset(vars.scaled, sample == vars[[3]]$sample)
# train.4 <- subset(vars.scaled, sample == vars[[4]]$sample)
# test.1 <- subset(vars.scaled, sample == vars[[1]]$sample & class==T)
# test.2 <- subset(vars.scaled, sample == vars[[2]]$sample & class==T)
# test.3 <- subset(vars.scaled, sample == vars[[3]]$sample & class==T)
# test.4 <- subset(vars.scaled, sample == vars[[4]]$sample & class==T)
ggplot(data=subset(vars.df, exp(DP) > 10), aes(x=AF, fill=class)) + geom_density(binwidth=0.5, alpha=0.2, position="identity") + facet_wrap(~sample)
head(vars.df)
head(varscan.vcf)
nrow(subset(varscan.vcf, MapQual1 == 1))
varscan.vcf <- read.csv("/Users/Adam/avera/vcf/T47D_vcf_5_28/T47D-RNATotal-CC-04132015-rep2-repeat_S7.vcf", stringsAsFactors = F, sep="\t", header=T)
varscan.variants <- paste(varscan.vcf$Chrom, ":g.", varscan.vcf$Position, varscan.vcf$Ref, ">", varscan.vcf$VarAllele, sep="")
vars.compare <- list()
vars.compare[[1]] <- gatk.variants
vars.compare[[2]] <- varscan.variants
length(intersect(vars.compare[[1]], vars.compare[[2]]))
anno.files <- paste(getwd(), list.files(getwd()), sep="/")
sample.names <- gsub(".vcf", "", list.files(getwd()))
setwd("/Users/Adam/avera/vcf/varscan/")
anno.files <- paste(getwd(), list.files(getwd()), sep="/")
sample.names <- gsub(".vcf", "", list.files(getwd()))
anno.files
sample.names
setwd("/Users/Adam/avera/vcf/varscan/")
anno.files <- paste(getwd(), list.files(getwd()), sep="/")
sample.names <- gsub(".vcf", "", list.files(getwd()))
getVars <- function(varscan.vcf){
var <- read.csv(varscan.vcf, stringsAsFactors = F, header = T, sep="\t")
var$Variant <- paste(var$Chrom, ":g.", var$Position, var$Ref, ">", var$VarAllele, sep="")
sample <- strsplit(varscan.vcf, "/")[[1]]
var$sample <- gsub(".vcf", "", sample[length(sample)])
var
}
varscan <- lapply(anno.files, getVars)
anno.files
setwd("/Users/Adam/avera/vcf/varscan/")
anno.files <- paste(getwd(), list.files(getwd()), sep="/")
sample.names <- gsub(".vcf", "", list.files(getwd()))
getVars <- function(varscan.vcf){
var <- read.csv(varscan.vcf, stringsAsFactors = F, header = T, sep="\t")
var$Variant <- paste(var$Chrom, ":g.", var$Position, var$Ref, ">", var$VarAllele, sep="")
sample <- strsplit(varscan.vcf, "/")[[1]]
var$sample <- gsub(".vcf", "", sample[length(sample)])
var
}
varscan <- lapply(anno.files, getVars)
read.csv("T47D-b2_S11.vcf")
setwd("/Users/Adam/avera/vcf/varscan/")
anno.files <- paste(getwd(), list.files(getwd()), sep="/")
sample.names <- gsub(".vcf", "", list.files(getwd()))
getVars <- function(varscan.vcf){
var <- read.csv(varscan.vcf, stringsAsFactors = F, header = T, sep="\t")
var$Variant <- paste(var$Chrom, ":g.", var$Position, var$Ref, ">", var$VarAllele, sep="")
sample <- strsplit(varscan.vcf, "/")[[1]]
var$sample <- gsub(".vcf", "", sample[length(sample)])
var
}
varscan <- lapply(anno.files, getVars)
lapply(varscan, nrow)
Reduce(intersect, c(varscan[[1]]$Variant, varscan[[2]]$Variant, varscan[[3]]$Variant))
variants <- Reduce(intersect, c(varscan[[1]]$Variant, varscan[[2]]$Variant, varscan[[3]]$Variant))
variants
variants <- Reduce(intersect, list(varscan[[1]]$Variant, varscan[[2]]$Variant, varscan[[3]]$Variant))
variants
common <- Reduce(intersect, list(varscan[[1]]$Variant, varscan[[2]]$Variant, varscan[[3]]$Variant))
getCommonVariants <- function(df, common.variants){
subset(df, Variant %in% common.variants)
}
## subset variants not in common list
getUncommonVariants <- function(df, common.variants){
subset(df, !(df$Variant %in% common.variants))
}
mean.DP <- sapply(vars.filtered, function(i) mean(i$DP))
mean.DP.common <- sapply(common.vars, function(i) mean(i$DP))
mean.DP.uncommon <- sapply(uncommon.vars, function(i) mean(i$DP))
mean.QD <- sapply(vars.filtered, function(i) mean(i$QD))
mean.QD.common <- sapply(common.vars, function(i) mean(i$QD))
mean.QD.uncommon <- sapply(uncommon.vars, function(i) mean(i$QD))
common.vars <- lapply(varscan, getCommonVariants, common)
uncommon.vars <- lapply(varscan, getUncommonVariants, common)
mean.DP <- sapply(vars.filtered, function(i) mean(i$DP))
mean.DP.common <- sapply(common.vars, function(i) mean(i$DP))
mean.DP.uncommon <- sapply(uncommon.vars, function(i) mean(i$DP))
mean.QD <- sapply(vars.filtered, function(i) mean(i$QD))
mean.QD.common <- sapply(common.vars, function(i) mean(i$QD))
mean.QD.uncommon <- sapply(uncommon.vars, function(i) mean(i$QD))
mean.DP <- sapply(varscan, function(i) mean(i$DP))
mean.DP.common <- sapply(common.vars, function(i) mean(i$DP))
mean.DP.uncommon <- sapply(uncommon.vars, function(i) mean(i$DP))
mean.QD <- sapply(varscan, function(i) mean(i$QD))
mean.QD.common <- sapply(common.vars, function(i) mean(i$QD))
mean.QD.uncommon <- sapply(uncommon.vars, function(i) mean(i$QD))
mean.QD.common
head(varscan[[1]])
setwd("/Users/Adam/avera/vcf/varscan/")
anno.files <- paste(getwd(), list.files(getwd()), sep="/")
sample.names <- gsub(".vcf", "", list.files(getwd()))
getVars <- function(varscan.vcf){
var <- read.csv(varscan.vcf, stringsAsFactors = F, header = T, sep="\t")
var$Variant <- paste(var$Chrom, ":g.", var$Position, var$Ref, ">", var$VarAllele, sep="")
sample <- strsplit(varscan.vcf, "/")[[1]]
var$sample <- gsub(".vcf", "", sample[length(sample)])
var$DP <- var$Reads1 + var$Reads2
var
}
varscan <- lapply(anno.files, getVars)
common.vars <- lapply(varscan, getCommonVariants, common)
uncommon.vars <- lapply(varscan, getUncommonVariants, common)
mean.DP <- sapply(varscan, function(i) mean(i$DP))
mean.DP.common <- sapply(common.vars, function(i) mean(i$DP))
mean.DP.uncommon <- sapply(uncommon.vars, function(i) mean(i$DP))
mean.DP
mean.DP.common
mean.DP.uncommon
setwd("/Users/Adam/avera/vcf/varscan/")
anno.files <- paste(getwd(), list.files(getwd()), sep="/")
sample.names <- gsub(".vcf", "", list.files(getwd()))
getVars <- function(varscan.vcf){
var <- read.csv(varscan.vcf, stringsAsFactors = F, header = T, sep="\t")
var$Variant <- paste(var$Chrom, ":g.", var$Position, var$Ref, ">", var$VarAllele, sep="")
sample <- strsplit(varscan.vcf, "/")[[1]]
var$sample <- gsub(".vcf", "", sample[length(sample)])
var$DP <- var$Reads1 + var$Reads2
var
}
varscan <- lapply(anno.files, getVars)
mean.DP <- sapply(varscan, function(i) mean(i$DP))
mean.DP.common <- sapply(common.vars, function(i) mean(i$DP))
mean.DP.uncommon <- sapply(uncommon.vars, function(i) mean(i$DP))
mean.DP.uncommon <- sapply(uncommon.vars, function(i) mean(i$DP))
mean.DP
mean.DP.common
mean.DP.uncommon
getCommonVariants <- function(df, common.variants){
subset(df, Variant %in% common.variants)
}
## subset variants not in common list
getUncommonVariants <- function(df, common.variants){
subset(df, !(df$Variant %in% common.variants))
}
mean.DP <- sapply(varscan, function(i) mean(i$DP))
mean.DP.common <- sapply(common.vars, function(i) mean(i$DP))
mean.DP.uncommon <- sapply(uncommon.vars, function(i) mean(i$DP))
mean.DP.common
mean.DP.uncommon
common.vars <- lapply(varscan, getCommonVariants, common)
uncommon.vars <- lapply(varscan, getUncommonVariants, common)
mean.DP <- sapply(varscan, function(i) mean(i$DP))
mean.DP.common <- sapply(common.vars, function(i) mean(i$DP))
mean.DP.uncommon <- sapply(uncommon.vars, function(i) mean(i$DP))
common.vars <- lapply(varscan, getCommonVariants, common)
uncommon.vars <- lapply(varscan, getUncommonVariants, common)
mean.DP <- sapply(varscan, function(i) mean(i$DP))
mean.DP.common <- sapply(common.vars, function(i) mean(i$DP))
mean.DP.uncommon <- sapply(uncommon.vars, function(i) mean(i$DP))
mean.DP
mean.DP.uncommon
mean.DP.common
setwd("/Users/Adam/avera/vcf/varscan/")
anno.files <- paste(getwd(), list.files(getwd()), sep="/")
sample.names <- gsub(".vcf", "", list.files(getwd()))
anno.files
setwd("/Users/Adam/avera/vcf/varscan/")
files <- paste(getwd(), list.files(getwd()), sep="/")
sample.names <- gsub(".vcf", "", list.files(getwd()))
anno.files <- files[grepl("coverage", files)]
anno.files
setwd("/Users/Adam/avera/vcf/varscan/")
files <- paste(getwd(), list.files(getwd()), sep="/")
sample.names <- gsub(".vcf", "", list.files(getwd()))
anno.files <- files[grepl("coverage", files)]
getVars <- function(varscan.vcf){
var <- read.csv(varscan.vcf, stringsAsFactors = F, header = T, sep="\t")
var$Variant <- paste(var$Chrom, ":g.", var$Position, var$Ref, ">", var$VarAllele, sep="")
sample <- strsplit(varscan.vcf, "/")[[1]]
var$sample <- gsub(".vcf", "", sample[length(sample)])
var$DP <- var$Reads1 + var$Reads2
var
}
varscan <- lapply(anno.files, getVars)
## subset variants that appear in all VCF
getCommonVariants <- function(df, common.variants){
subset(df, Variant %in% common.variants)
}
## subset variants not in common list
getUncommonVariants <- function(df, common.variants){
subset(df, !(df$Variant %in% common.variants))
}
common.vars <- lapply(varscan, getCommonVariants, common)
uncommon.vars <- lapply(varscan, getUncommonVariants, common)
mean.DP <- sapply(varscan, function(i) mean(i$DP))
mean.DP.common <- sapply(common.vars, function(i) mean(i$DP))
mean.DP.uncommon <- sapply(uncommon.vars, function(i) mean(i$DP))
mean.DP
mmean.DP.common
mean.DP.common
mean.DP.uncommon
length(common)
length(common.vars)
lapply(common.vars, nrow)
variants <- lapply(vars, function(i) i$Variant)
common <- Reduce(intersect, variants)
length(common)
lapply(vars, nrow)
anno.files <- files[grepl("Total", files)]
getVars <- function(varscan.vcf){
var <- read.csv(varscan.vcf, stringsAsFactors = F, header = T, sep="\t")
var$Variant <- paste(var$Chrom, ":g.", var$Position, var$Ref, ">", var$VarAllele, sep="")
sample <- strsplit(varscan.vcf, "/")[[1]]
var$sample <- gsub(".vcf", "", sample[length(sample)])
var$DP <- var$Reads1 + var$Reads2
var
}
varscan <- lapply(anno.files, getVars)
lapply(varscan, nrow)
variants <- lapply(varscan, function(i) i$Variant)
common <- Reduce(intersect, variants)
length(common)
anno.files
setwd("/Users/Adam/avera/vcf/varscan/")
files <- paste(getwd(), list.files(getwd()), sep="/")
sample.names <- gsub(".vcf", "", list.files(getwd()))
anno.files <- files[grepl("Total", files)]
getVars <- function(varscan.vcf){
var <- read.csv(varscan.vcf, stringsAsFactors = F, header = T, sep="\t")
var$Variant <- paste(var$Chrom, ":g.", var$Position, var$Ref, ">", var$VarAllele, sep="")
sample <- strsplit(varscan.vcf, "/")[[1]]
var$sample <- gsub(".vcf", "", sample[length(sample)])
var$DP <- var$Reads1 + var$Reads2
var
}
varscan <- lapply(anno.files, getVars)
variants <- lapply(varscan, function(i) i$Variant)
common <- Reduce(intersect, variants)
length(common)
lapply(varscan, nrow)
anno.files <- files[grepl("total", files)]
getVars <- function(varscan.vcf){
var <- read.csv(varscan.vcf, stringsAsFactors = F, header = T, sep="\t")
var$Variant <- paste(var$Chrom, ":g.", var$Position, var$Ref, ">", var$VarAllele, sep="")
sample <- strsplit(varscan.vcf, "/")[[1]]
var$sample <- gsub(".vcf", "", sample[length(sample)])
var$DP <- var$Reads1 + var$Reads2
var
}
varscan <- lapply(anno.files, getVars)
variants <- lapply(varscan, function(i) i$Variant)
common <- Reduce(intersect, variants)
length(common)
lapply(varscan, nrow)
anno.files <- files[grepl("b2", files)]
getVars <- function(varscan.vcf){
var <- read.csv(varscan.vcf, stringsAsFactors = F, header = T, sep="\t")
var$Variant <- paste(var$Chrom, ":g.", var$Position, var$Ref, ">", var$VarAllele, sep="")
sample <- strsplit(varscan.vcf, "/")[[1]]
var$sample <- gsub(".vcf", "", sample[length(sample)])
var$DP <- var$Reads1 + var$Reads2
var
}
varscan <- lapply(anno.files, getVars)
variants <- lapply(varscan, function(i) i$Variant)
common <- Reduce(intersect, variants)
lapply(varscan, nrow)
length(common)
anno.files <- files[grepl("coverage", files)]
getVars <- function(varscan.vcf){
var <- read.csv(varscan.vcf, stringsAsFactors = F, header = T, sep="\t")
var$Variant <- paste(var$Chrom, ":g.", var$Position, var$Ref, ">", var$VarAllele, sep="")
sample <- strsplit(varscan.vcf, "/")[[1]]
var$sample <- gsub(".vcf", "", sample[length(sample)])
var$DP <- var$Reads1 + var$Reads2
var
}
varscan <- lapply(anno.files, getVars)
variants <- lapply(varscan, function(i) i$Variant)
common <- Reduce(intersect, variants)
lapply(varscan, nrow)
length(common)
anno.files <- files[!grepl("coverage", files)]
getVars <- function(varscan.vcf){
var <- read.csv(varscan.vcf, stringsAsFactors = F, header = T, sep="\t")
var$Variant <- paste(var$Chrom, ":g.", var$Position, var$Ref, ">", var$VarAllele, sep="")
sample <- strsplit(varscan.vcf, "/")[[1]]
var$sample <- gsub(".vcf", "", sample[length(sample)])
var$DP <- var$Reads1 + var$Reads2
var
}
varscan <- lapply(anno.files, getVars)
variants <- lapply(varscan, function(i) i$Variant)
common <- Reduce(intersect, variants)
lapply(varscan, nrow)
length(common)
build()
library(devtools)
setwd("~/sulab/repos/myvariant.R")
build()
?install.packages
?update.packages
update.packages(c("httr", "jsonlite"))
install.packages(c("httr", "jsonlite"))
build()
check()
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
source('~/sulab/repos/myvariant.R/R/readHGVS.R')
source('~/sulab/repos/myvariant.R/R/utils.R')
library(myvariant)
library(VariantAnnotation)
file.path <- system.file("extdata", "dbsnp_mini.vcf", package="myvariant")
vcf <- readVcf(file.path, genome="hg19")
hgvs <- formatHgvs(vcf, variant_type="snp")
head(hgvs)
variant <- getVariant("chr1:g.35367G>A")
variant[[1]]$dbnsfp$genename
variant[[1]]$cadd$phred
getVariants(head(hgvs),
fields="cadd.consequence")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariants(head(hgvs),
fields="cadd.consequence")
url <- "http://myvariant.info/v1"
res <- POST(url)
res
content(res)
httr::content(res, "text")
head(hgvs)
params <- list(hgvsids=head(hgvs), fields="cadd")
res <- POST(url, body=params)
res
url
mv <- "http://myvariant.info/v1/variant/chr7:g.55241707G>T,chr9:g.107620835G>A"
POST(mv)
params = 'ids=chr16:g.28883241A>G,chr1:g.35367G>A&fields=dbnsfp.genename,cadd.gene'
POST(params)
POST(url, body=params)
POST('http://myvariant.info/v1/variant', params)
params
POST('http://myvariant.info/v1/variant', params, encode="json")
?POST
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariants(head(hgvs),
fields="cadd.consequence")
b2 <- "http://httpbin.org/post"
POST(b2, body = "A simple text string")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariants(head(hgvs),
fields="cadd.consequence")
head(hgvs)
rsids <- paste("rs", info(vcf)$RS, sep="")
res <- queryVariants(q=rsids, scopes="dbsnp.rsid", fields="all")
?is.request
getAnywhere("is.request")
res <- queryVariants(q=rsids, scopes="dbsnp.rsid", fields="all")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
res <- queryVariants(q=rsids, scopes="dbsnp.rsid", fields="all")
res
rsids
res <- queryVariants(q=rsids, scopes="dbsnp.rsid")
res
res <- queryVariants(rsids, scopes="dbsnp.rsid")
res
getVariants(head(hgvs),
fields="cadd.consequence")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariants(head(hgvs),
fields="cadd.consequence")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariants(head(hgvs),
fields="cadd.consequence")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariants(head(hgvs),
fields="cadd.consequence")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariants(head(hgvs),
fields="cadd.consequence")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariants(head(hgvs),
fields="cadd.consequence")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariants(head(hgvs),
fields="cadd.consequence")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariants(head(hgvs),
fields="cadd.consequence")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariants(head(hgvs),
fields="cadd.consequence")
headers
headers <- c(`Content-Type`='application/x-www-form-urlencoded',
`User-Agent`=sprintf('R-httr_myvariant.R/httr.%s', version))
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
.headers <- c(`Content-Type`='application/x-www-form-urlencoded',
`User-Agent`=sprintf('R-httr_myvariant.R/httr.%s', version))
.headers
.headers <- list(`Content-Type`='application/x-www-form-urlencoded',
`User-Agent`=sprintf('R-httr_myvariant.R/httr.%s', version))
.headers
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariants(head(hgvs),
fields="cadd.consequence")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariants(head(hgvs),
fields="cadd.consequence")
?config
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariants(head(hgvs),
fields="cadd.consequence")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariant("chr1:g.10108TA>T")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariant("chr1:g.10108TA>T")
getVariant("chr16:g.28883241A>G")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
getVariant("chr16:g.28883241A>G")
Sweave("vignettes/myvariant.Rnw")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
Sweave("vignettes/myvariant.Rnw")
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
Sweave("vignettes/myvariant.Rnw")
setwd("~/sulab/repos/myvariant.R/vignettes")
Sweave("myvariant.Rnw")
biocLite("BiocCheck")
library(BiocCheck)
build()
source('~/sulab/repos/myvariant.R/R/MyVariant.R')
source('~/sulab/repos/myvariant.R/R/readHGVS.R')
source('~/sulab/repos/myvariant.R/R/utils.R')
build()
file.path <- system.file("extdata", "dbsnp_mini.vcf", package="myvariant")
vcf <- readVcf(file.path, genome="hg19")
rowRanges(vcf)
library(VariantAnnotation)
remove.packages("myvariant")
install_github("Network-Of-Biothings/myvariant.R")
build()
library(myvariant)
library(VariantAnnotation)
file.path <- system.file("extdata", "dbsnp_mini.vcf", package="myvariant")
vcf <- readVcf(file.path, genome="hg19")
rowRanges(vcf)
hgvs <- formatHgvs(vcf, variant_type="snp")
head(hgvs)
biocLite()
biocLite()
build()
sessionInfo()
